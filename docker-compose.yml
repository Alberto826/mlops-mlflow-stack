version: "3.8"

services:

  # traefik:
  #   image: traefik:v2.8
  #   ports:
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - traefik-public-certificates:/certificates
  #   command:
  #     - --log.level=DEBUG
  #     # - --api.insecure=true
  #     - --providers.docker=true
  #     - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
  #     - --providers.docker.exposedbydefault=false
  #     # - --providers.docker.swarmmode
  #     - --entrypoints.http.address=:80
  #     - --entrypoints.https.address=:443
  #     - --certificatesresolvers.le.acme.email=${TRAEFIK_EMAIL?Variable not set}
  #     - --certificatesresolvers.le.acme.storage=/certificates/acme.json
  #     - --certificatesresolvers.le.acme.tlschallenge=true
  #     - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
  #     # Enable the access log, with HTTP requests
  #     - --accesslog
  #     # Enable the Traefik log, for configurations and errors
  #     - --log
  #     # Enable the Dashboard and API
  #     - --api
  #   networks:
  #     - traefik-public
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     # placement:
  #     #   constraints:
  #     #     - node.labels.traefik-public.traefik-public-certificates == true
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=traefik-public
  #     - traefik.constraint-label=traefik-public
  #     #- traefik.http.middlewares.admin-auth.basicauth.users=${BASIC_AUTH_USERNAME?Variable not set}:${BASIC_AUTH_HASHED_PASSWORD?Variable not set}
  #     - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
  #     - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
  #     - traefik.http.routers.traefik-public-http.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`)
  #     - traefik.http.routers.traefik-public-http.entrypoints=http
  #     - traefik.http.routers.traefik-public-http.middlewares=https-redirect
  #     - traefik.http.routers.traefik-public-https.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`)
  #     - traefik.http.routers.traefik-public-https.entrypoints=https
  #     - traefik.http.routers.traefik-public-https.tls=true
  #     - traefik.http.routers.traefik-public-https.service=api@internal
  #     - traefik.http.routers.traefik-public-https.tls.certresolver=le
  #     #- traefik.http.routers.traefik-public-https.middlewares=admin-auth
  #     - traefik.http.services.traefik-public.loadbalancer.server.port=8080

  # keycloak_db:
  #   image: postgres
  #   restart: always
  #   volumes:
  #     - keycloak-vol:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_DB: keycloak_db
  #     POSTGRES_USER: keycloak_user
  #     POSTGRES_PASSWORD: keycloak_password
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   networks:
  #     - auth-network
  #   labels:
  #     - "traefik.enable=false"
  
  # keycloak:
  #   image: jboss/keycloak:7.0.1
  #   hostname: keycloak
  #   ports:
  #     - 8081:8080
  #   environment:
  #     - DB_VENDOR=POSTGRES
  #     - DB_ADDR=keycloak_db
  #     - DB_DATABASE=keycloak_db
  #     - DB_PORT=5432
  #     - DB_USER=keycloak_user
  #     - DB_SCHEMA=public
  #     - DB_PASSWORD=keycloak_password
  #     - PROXY_ADDRESS_FORWARDING=true
  #     - KEYCLOAK_LOGLEVEL=INFO
  #     - KEYCLOAK_USER=admin
  #     - KEYCLOAK_PASSWORD=password
  #   networks:
  #     - auth-network
  #     - traefik-public
  #   depends_on: 
  #     - traefik
  #     - keycloak_db    
  #   deploy:
  #     mode: replicated
  #     replicas: 0
  #     restart_policy:
  #       condition: on-failure
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.keycloak.rule=Host(`${AUTH_DOMAIN?Variable AUTH_DOMAIN not set}`)"
  #     - "traefik.http.routers.keycloak.entrypoints=http"
  #     - "traefik.http.routers.keycloak.middlewares=https-redirect"
  #     - "traefik.http.routers.keycloak-https.rule=Host(`${AUTH_DOMAIN?Variable AUTH_DOMAIN not set}`)"
  #     - "traefik.http.routers.keycloak-https.entrypoints=https"
  #     - "traefik.http.routers.keycloak-https.tls.certresolver=le"
  #     - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
  #   command: ["-b", "0.0.0.0", "-Dkeycloak.profile.feature.docker=enabled"]

  minio:
    image:  minio/minio:RELEASE.2022-08-25T07-17-05Z
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure   
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
      # - MINIO_DOMAIN=${MINIO_DOMAIN?Variable MINIO_DOMAIN not set}
      - MINIO_BROWSER_REDIRECT_URL=http://${MINIO_DOMAIN?Variable MINIO_DOMAIN not set}
      # - MINIO_BROWSER_REDIRECT_URL=http://0.0.0.0
    command: server /data --console-address ":9001"
    networks:
      - minio-network
      - traefik-public
    volumes:
      - minio_volume:/data
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.minio-http.service=minio
      - traefik.http.routers.minio-http.rule=Host(`${MINIO_DOMAIN?Variable MINIO_DOMAIN not set}`)
      - traefik.http.routers.minio-http.entrypoints=http
      - traefik.http.routers.minio-http.middlewares=https-redirect
      - traefik.http.routers.minio-https.service=minio
      - traefik.http.routers.minio-https.rule=Host(`${MINIO_DOMAIN?Variable MINIO_DOMAIN not set}`)
      - traefik.http.routers.minio-https.entrypoints=https
      - traefik.http.routers.minio-https.tls.certresolver=le
      - traefik.http.services.minio.loadbalancer.server.port=9001
  
  mlflow_db:
    image: postgres
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: mlflow_db
      POSTGRES_USER: mlflow_user
      POSTGRES_PASSWORD: mlflow_password
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - db-network

  mlflow:
    restart: always
    build: ./mlflow
    image: mlflow_server
    environment:
      - BACKEND_STORE_URI=${BACKEND_STORE_URI}
      - DEFAULT_ARTIFACT_ROOT=${DEFAULT_ARTIFACT_ROOT}
      - ARTIFACTS_DESTINATION=${ARTIFACTS_DESTINATION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_DEFAULT_REGION=${AWS_REGION}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - MLFLOW_S3_IGNORE_TLS=${MLFLOW_S3_IGNORE_TLS?Variable MLFLOW_S3_IGNORE_TLS not set}
    volumes:
      - mlflow-volume:/mlflow
    depends_on:
      - mlflow_db
    networks:
      - traefik-public
      - db-network
      - minio-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.mlflow-http.rule=Host(`${MLFLOW_DOMAIN?Variable MLFLOW_DOMAIN not set}`)
      - traefik.http.routers.mlflow-http.entrypoints=http
      - traefik.http.routers.mlflow-http.middlewares=https-redirect
      - traefik.http.routers.mlflow-https.rule=Host(`${MLFLOW_DOMAIN?Variable MLFLOW_DOMAIN not set}`)
      - traefik.http.routers.mlflow-https.entrypoints=https
      - traefik.http.routers.mlflow-https.tls.certresolver=le
      - traefik.http.services.mlflow.loadbalancer.server.port=5000

  mldeploy:
    build: ./mldeploy
    depends_on:
      - mlflow
    networks:
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.mldeploy-http.rule=Host(`${MLDEPLOY_DOMAIN?Variable MLDEPLOY_DOMAIN not set}`)
      - traefik.http.routers.mldeploy-http.entrypoints=http
      - traefik.http.routers.mldeploy-http.middlewares=https-redirect
      - traefik.http.routers.mldeploy-https.rule=Host(`${MLDEPLOY_DOMAIN?Variable MLDEPLOY_DOMAIN not set}`)
      - traefik.http.routers.mldeploy-https.entrypoints=https
      - traefik.http.routers.mldeploy-https.tls.certresolver=le
      - traefik.http.services.mldeploy.loadbalancer.server.port=5000


volumes:
  mlflow-volume:
  traefik-public-certificates:
  postgres:
  keycloak-vol:
  minio_volume:

networks:
  traefik-public:
    external: true
  db-network:
  auth-network:
  minio-network: